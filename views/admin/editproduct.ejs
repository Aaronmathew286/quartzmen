<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <link href="https://fonts.googleapis.com/css2?family=Almendra+SC&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
        integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">

    <style>
        .heading {
            text-align: center;
        }

        .image-preview-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .image-preview-item {
            position: relative;
            display: inline-block;
            margin-bottom: 15px;
            padding: 10px;
        }

        .preview-image {
            max-width: 150px;
            max-height: 150px;
            display: block;
            margin-bottom: 10px;
        }

        .delete-button,
        .crop-button {
            position: absolute;
            bottom: 5px;
            background: #fff;
            color: #000;
            border: 1px solid #ccc;
            border-radius: 3px;
            cursor: pointer;
            padding: 5px 10px;
            font-size: 12px;
            z-index: 10;
        }

        .delete-button {
            right: 80px;
        }

        .crop-button {
            right: 5px;
            background: #007bff;
            /* Bootstrap primary color */
            color: #fff;
        }

        .error-message {
            color: red;
            font-size: 0.9em;
        }

        .select-wrapper {
            position: relative;
            display: flex;
            align-items: center;
        }

        .select-wrapper select {
            width: 100%;
            appearance: none;
            /* Remove default select arrow */
            padding-right: 30px;
            /* Space for custom arrow */
        }

        .select-arrow {
            position: absolute;
            right: 10px;
            pointer-events: none;
            /* Prevent clicking on the arrow */
        }

        .select-arrow i {
            font-size: 1.2em;
            color: #333;
        }

        .select-wrapper.open .select-arrow i {
            transform: rotate(180deg);
            /* Rotate arrow up */
        }
    </style>
</head>

<body>
    <div class="container mt-5">
        <div class="form-group">
            <a href="/admin/productmanagement"><i class="fa-solid fa-circle-arrow-left"></i></a>
        </div>
        <h2 class="heading">Edit Product</h2>
        <% if (typeof errMessage !=='undefined' ) { %>
            <div class="text-danger mt-1" style="text-align: center;">
                <h5><%= errMessage %></h5>

            </div>
            <% } %>

        <form action="/admin/editproduct/<%= product._id %>" method="POST" enctype="multipart/form-data"
            id="productForm">
            <div class="form-group">
                <label for="productName">Name</label>
                <input type="text" class="form-control" id="productName" name="name" value="<%= product.name %>"
                    required>
                <div class="error-message" id="productNameError"></div>
            </div>

            <div class="form-group">
                <label for="productBrand">Brand</label>
                <div class="select-wrapper">
                    <select class="form-control" id="productBrand" name="brand">
                        <option value="-">-</option>
                        <!-- Preselect the current brand -->
                        <option value="Titan" <%=product.brand==='Titan' ? 'selected' : '' %>>Titan</option>
                        <option value="Fastrack" <%=product.brand==='Fastrack' ? 'selected' : '' %>>Fastrack</option>
                        <option value="Casio" <%=product.brand==='Casio' ? 'selected' : '' %>>Casio</option>
                        <option value="Timex" <%=product.brand==='Timex' ? 'selected' : '' %>>Timex</option>
                        <option value="Citizen" <%=product.brand==='Citizen' ? 'selected' : '' %>>Citizen</option>
                        <option value="Fossil" <%=product.brand==='Fossil' ? 'selected' : '' %>>Fossil</option>
                        <option value="Seiko" <%=product.brand==='Seiko' ? 'selected' : '' %>>Seiko</option>
                        <option value="Michael Kors" <%=product.brand==='Michael Kors' ? 'selected' : '' %>>Michael Kors
                        </option>
                        <option value="Tommy Hilfiger" <%=product.brand==='Tommy Hilfiger' ? 'selected' : '' %>>Tommy
                            Hilfiger</option>
                        <option value="Emporio Armani" <%=product.brand==='Emporio Armani' ? 'selected' : '' %>>Emporio
                            Armani</option>
                        <option value="Daniel Wellington" <%=product.brand==='Daniel Wellington' ? 'selected' : '' %>
                            >Daniel Wellington</option>
                        <option value="Guess" <%=product.brand==='Guess' ? 'selected' : '' %>>Guess</option>
                        <!-- Add other brands similarly -->
                    </select>
                    <span class="select-arrow"><i class="fas fa-angle-down"></i></span>
                </div>
                <div class="error-message" id="productBrandError"></div>
            </div>
            <div class="form-group">
                <label for="strapMaterial">Strap Material</label>
                <select class="form-control" id="strapMaterial" name="strapMaterial" required>
                    <option value="">-</option>
                    <option value="leather strap" <%=product.strapMaterial==='leather strap' ? 'selected' : '' %>
                        >Leather Strap</option>
                    <option value="stainless steel" <%=product.strapMaterial==='stainless steel' ? 'selected' : '' %>
                        >Stainless Steel</option>
                    <option value="nylon strap" <%=product.strapMaterial==='nylon strap' ? 'selected' : '' %>>Nylon
                        Strap</option>
                    <option value="silicon rubber" <%=product.strapMaterial==='silicon rubber' ? 'selected' : '' %>
                        >Silicon Rubber</option>
                    <option value="ceramic band" <%=product.strapMaterial==='ceramic band' ? 'selected' : '' %>>Ceramic
                        Band</option>
                    <option value="mesh band" <%=product.strapMaterial==='mesh band' ? 'selected' : '' %>>Mesh Band
                    </option>
                    <option value="titanium band" <%=product.strapMaterial==='titanium band' ? 'selected' : '' %>
                        >Titanium Band</option>
                </select>
                <div class="error-message" id="strapMaterialError"></div>
            </div>
            <div class="form-group">
                <label for="gender">Gender</label>
                <select class="form-control" id="gender" name="gender" required>
                    <option value="">-</option>
                    <option value="male" <%=product.gender==='male' ? 'selected' : '' %>>Male</option>
                    <option value="female" <%=product.gender==='female' ? 'selected' : '' %>>Female</option>
                    <option value="kids" <%=product.gender==='kids' ? 'selected' : '' %>>Kids</option>
                </select>
            </div>
            <div class="form-group">
                <label for="category">Category</label>
                <div class="select-wrapper">
                    <select class="form-control" id="category" name="category" required>
                        <option value="">-</option>
                        <% if (existingCategories && existingCategories.length> 0) { %>
                            <% existingCategories.forEach(function(category) { %>
                                <option value="<%= category.categoryName %>" <%=product.category===category.categoryName
                                    ? 'selected' : '' %>><%= category.categoryName %>
                                </option>
                                <% }) %>
                                    <% } %>
                    </select>
                    <span class="select-arrow"><i class="fas fa-angle-down"></i></span>
                </div>
                <div class="error-message" id="categoryError"></div>
            </div>

            <!-- Other fields for product details such as strap material, gender, stock, etc. -->

            <div class="form-group">
                <label for="description">Description</label>
                <textarea class="form-control" id="description" name="description"
                    rows="3"><%= product.description %></textarea>
                <div class="error-message" id="descriptionError"></div>
            </div>

            <div class="form-group">
                <label for="stock">Stock</label>
                <input type="number" class="form-control" id="stock" name="stock" value="<%= product.stock %>">
                <div class="error-message" id="stockError"></div>
            </div>

            <!-- Pricing and offers -->
            <div class="form-group">
                <label for="originalPrice">Original Price</label>
                <input type="number" class="form-control" id="originalPrice" name="originalPrice"
                    value="<%= product.originalPrice %>" oninput="calculatePrice()">
                <div class="error-message" id="originalPriceError"></div>
            </div>

            <div class="form-group">
                <label for="offerPercentage">Offer Percentage</label>
                <input type="number" class="form-control" id="offerPercentage" name="offerPercentage"
                    value="<%= product.offerPercentage %>" oninput="calculatePrice()">
                <div class="error-message" id="offerPercentageError"></div>
            </div>

            <div class="form-group">
                <label for="price">Price</label>
                <input type="number" class="form-control" id="price" value="<%= product.price %>" readonly>
                <div class="error-message" id="priceError"></div>
            </div>



            <div class="form-group">
                <label for="existingImages">Existing Product Images:</label>
                <div class="existing-images">
                    <h4>Existing Images</h4>
                    <% product.image.forEach(function(img, index) { %>
                        <div class="image-preview">
                            <img src="/uploads/<%= img %>" alt="Product Image" width="100">
                            <input type="checkbox" name="deletedImages" value="<%= img %>"> Delete this image
                        </div>
                    <% }) %>
                </div>
                <input type="hidden" name="existingImagesToDelete" id="existingImagesToDelete">
            </div>
            
<!-- New Images Upload Section -->
<div class="form-group">
    <label for="fileUploader">Add New Product Images:</label>
    <input type="file" id="fileUploader" name="image" accept=".jpg,.png,.jpeg" multiple>
    <div id="imagePreview" class="image-preview-container"></div>
    <div class="error-message" id="imageError"></div>
</div>

            
<!-- Modal for Cropping Images -->
<div class="modal fade" id="cropModal" tabindex="-1" role="dialog" aria-labelledby="cropModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <img id="cropImage" src="" alt="Crop Image" style="max-width: 100%;">
            </div>
            <div class="modal-footer">
                <button type="button" id="cropButton" class="btn btn-primary">Crop</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



            <button type="submit" class="btn btn-primary">Update Product</button>
        </form>
    </div>

    <!-- jQuery and Bootstrap Bundle (includes Popper) -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>

        function calculatePrice() {
            const originalPrice = parseFloat(document.getElementById('originalPrice').value) || 0; // Corrected ID
            const offerPercentage = parseFloat(document.getElementById('offerPercentage').value) || 0;
            const price = originalPrice - (originalPrice * (offerPercentage / 100));
            document.getElementById('price').value = price.toFixed(2);
        }
        const productNameInput = document.getElementById('productName');
    const productBrandInput = document.getElementById('productBrand');
    const strapMaterialInput = document.getElementById('strapMaterial');
    const genderInput = document.getElementById('gender');
    const categoryInput = document.getElementById('category');
    const descriptionInput = document.getElementById('description');
    const stockInput = document.getElementById('stock');
    const originalPriceInput = document.getElementById('originalPrice');
    const offerPercentageInput = document.getElementById('offerPercentage');
    const priceInput = document.getElementById('price');
    const imageUploader = document.getElementById('fileUploader');

    const errorMessages = {
        productName: document.getElementById('productNameError'),
        productBrand: document.getElementById('productBrandError'),
        strapMaterial: document.getElementById('strapMaterialError'),
        gender: document.getElementById('genderError'),
        category: document.getElementById('categoryError'),
        description: document.getElementById('descriptionError'),
        stock: document.getElementById('stockError'),
        originalPrice: document.getElementById('originalPriceError'),
        offerPercentage: document.getElementById('offerPercentageError'),
        image: document.getElementById('imageError'),
    };

    function validateInput(input, errorElement, message) {
        if (!input.value.trim()) {
            errorElement.innerText = message;
            return false;
        }
        errorElement.innerText = '';
        return true;
    }

    function validateNumberInput(input, errorElement, message) {
        const value = parseFloat(input.value);
        if (isNaN(value) || value <= 0) {
            errorElement.innerText = message;
            return false;
        }
        errorElement.innerText = '';
        return true;
    }

    function validateOfferPercentage(input, errorElement, message) {
        const value = parseFloat(input.value);
        if (isNaN(value) || value < 0 || value > 90) {
            errorElement.innerText = message;
            return false;
        }
        errorElement.innerText = '';
        return true;
    }
    function validateInput(input) {
            const errorMessageDiv = input.nextElementSibling;
            let errorMessage = '';
            let isValid = true;
            switch (input.id) {
                case 'stock':
                    if (input.value < 0 || input.value > 90) {
                        errorMessage = 'Stock must be between 0 to 90';
                        isValid = false;
                    }
                    break;
                case 'originalPrice':
                    if (input.value <= 0) {
                        errorMessage = 'Original price must be greater than 0.';
                        isValid = false;
                    }
                    break;
                case 'offerPercentage':
                    if (input.value <= 0 || input.value > 90) {
                        errorMessage = 'Offer percentage must be between 0 and 90.';
                        isValid = false;
                    }
                    break;
            }

            if (!isValid) {
                errorMessageDiv.textContent = errorMessage;

                // Show SweetAlert notification
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: errorMessage,
                    confirmButtonText: 'OK',
                }).then(() => {
                    input.focus(); // Refocus the input after the alert
                    input.value = ''; // Clear the invalid input
                });

                return false;
            } else {
                errorMessageDiv.textContent = ''; // Clear error message if valid
                return true;
            }
        }

    


    productNameInput.addEventListener('input', () => validateInput(productNameInput, errorMessages.productName, 'Product name is required.'));
    productBrandInput.addEventListener('change', () => validateInput(productBrandInput, errorMessages.productBrand, 'Brand selection is required.'));
    strapMaterialInput.addEventListener('change', () => validateInput(strapMaterialInput, errorMessages.strapMaterial, 'Strap material selection is required.'));
    genderInput.addEventListener('change', () => validateInput(genderInput, errorMessages.gender, 'Gender selection is required.'));
    categoryInput.addEventListener('change', () => validateInput(categoryInput, errorMessages.category, 'Category selection is required.'));
    descriptionInput.addEventListener('input', () => validateInput(descriptionInput, errorMessages.description, 'Description is required.'));
    stockInput.addEventListener('input', () => validateInput(stockInput, errorMessages.stock, 'Stock must be a number.'));
    originalPriceInput.addEventListener('input', () => {
        validateNumberInput(originalPriceInput, errorMessages.originalPrice, 'Original price must be above 0.');
        calculatePrice(); 
    });
    offerPercentageInput.addEventListener('input', () => {
        validateOfferPercentage(offerPercentageInput, errorMessages.offerPercentage, 'Offer percentage must be between 0 and 90.');
        calculatePrice(); 
    });
    imageUploader.addEventListener('change', () => validateInput(imageUploader, errorMessages.image, 'At least one image is required.'));





    let currentImage = null;
    let cropper;
    let imageFiles = []; 

    function updateFileInput() {
        const dataTransfer = new DataTransfer();
        imageFiles.forEach(file => dataTransfer.items.add(file));
        document.getElementById('fileUploader').files = dataTransfer.files;
    }

    function handleImagePreview(file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            const img = document.createElement('img');
            img.src = e.target.result;
            img.className = 'preview-image';

            // Create delete button for new image
            const deleteBtn = document.createElement('button');
            deleteBtn.textContent = 'Delete';
            deleteBtn.className = 'delete-button';
            deleteBtn.type = 'button'; // Prevent form submission
            deleteBtn.addEventListener('click', (event) => {
                event.preventDefault();
                imageFiles = imageFiles.filter(f => f !== file);
                updateFileInput();
                img.remove();
                deleteBtn.remove();
                cropBtn.remove();
            });

            // Create crop button for new image
            const cropBtn = document.createElement('button');
            cropBtn.textContent = 'Crop';
            cropBtn.className = 'crop-button';
            cropBtn.type = 'button'; // Prevent form submission
            cropBtn.addEventListener('click', (event) => {
                event.preventDefault();
                currentImage = img;
                const cropImage = document.getElementById('cropImage');

                if (cropper) {
                    cropper.destroy();
                }

                cropImage.src = img.src;
                cropper = new Cropper(cropImage, {
                    aspectRatio: 1,
                });

                // Handle crop confirmation
                document.getElementById('cropButton').onclick = () => {
                    const canvas = cropper.getCroppedCanvas();
                    canvas.toBlob(blob => {
                        const index = imageFiles.indexOf(file);
                        if (index !== -1) {
                            imageFiles[index] = new File([blob], file.name, { type: file.type });
                            updateFileInput();
                        }
                    });
                    currentImage.src = canvas.toDataURL();
                    $('#cropModal').modal('hide');
                };

                // Show crop modal
                $('#cropModal').modal('show');
            });

            // Create container for image and buttons
            const previewContainer = document.createElement('div');
            previewContainer.className = 'image-preview-item';
            previewContainer.appendChild(img);
            previewContainer.appendChild(deleteBtn);
            previewContainer.appendChild(cropBtn);
            document.getElementById('imagePreview').appendChild(previewContainer);
        };
        reader.readAsDataURL(file);
    }


    document.getElementById('fileUploader').addEventListener('change', function(event) {
        const files = event.target.files;
        const newFiles = Array.from(files);
        imageFiles.push(...newFiles);
        document.getElementById('imagePreview').innerHTML = '';
        imageFiles.forEach(file => handleImagePreview(file));
        updateFileInput();
    });

document.addEventListener('DOMContentLoaded', () => {

    const existingImagesData = JSON.parse(document.getElementById('existingImages').textContent);
    initExistingImages(existingImagesData);
});

loadExistingImages(existingImageArray);







    </script>
</body>

</html>