<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <link href="https://fonts.googleapis.com/css2?family=Almendra+SC&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
        integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">

    <style>
            .navbar {
      background-color: #6c757d;
      /* Grey color */
      color: #fff;
    }

    .sidebar {
      background-color: #094077;
      color: #fff;
      height: 100vh;
      position: fixed;
      top: 0;
      left: 0;
      width: 250px;
      padding-top: 56px;
    }



    .nav-link {
      color: white;
      transition: background-color 0.3s ease;
      /* Adding transition for smooth effect */
    }

    .active {
      background-color: yellow;
      color: black;
    }

    .nav-link:hover {
      background-color: yellow;
    }

    .action-buttons {
      display: flex;
      /* Align items horizontally */
      justify-content: flex-end;
      /* Align items to the right */
      gap: 5px;
      /* Adds space between buttons */
    }

        .heading {
            text-align: center;
        }

        .image-preview-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }
    .image-preview-item {
        position: relative;
        display: inline-block;
        margin-bottom: 15px; /* Space between items */
        padding: 10px;
    }
    .preview-image {
        max-width: 150px;
        max-height: 150px;
        display: block;
        margin-bottom: 10px; /* Space between image and buttons */
    }
    .delete-button, .crop-button {
        position: absolute;
        bottom: 5px; /* Align buttons at the bottom of the preview item */
        background: #fff;
        color: #000;
        border: 1px solid #ccc;
        border-radius: 3px;
        cursor: pointer;
        padding: 5px 10px;
        font-size: 12px;
        z-index: 10;
    }
    .delete-button {
        right: 80px; /* Space for the crop button */
    }
    .crop-button {
        right: 5px;
        background: #007bff; /* Bootstrap primary color */
        color: #fff;
    }
        .error-message {
            color: red;
            font-size: 0.9em;
        }

        .select-wrapper {
            position: relative;
            display: flex;
            align-items: center;
        }

        .select-wrapper select {
            width: 100%;
            appearance: none;
            /* Remove default select arrow */
            padding-right: 30px;
            /* Space for custom arrow */
        }

        .select-arrow {
            position: absolute;
            right: 10px;
            pointer-events: none;
            /* Prevent clicking on the arrow */
        }

        .select-arrow i {
            font-size: 1.2em;
            color: #333;
        }

        .select-wrapper.open .select-arrow i {
            transform: rotate(180deg);
            /* Rotate arrow up */
        }
    </style>
</head>

<body>
  <!-- Sidebar -->
  <div class="container-fluid">
    <div class="row">
      <nav class="col-md-2 d-none d-md-block sidebar">
        <div class="sidebar-sticky">
          <ul class="nav flex-column">
            <li class="nav-item">
              <a class="nav-link" href="/admin/dashboard">Dashboard</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/admin/usermanagement">User Management</a>
            </li>
            <li class="nav-item">
              <a class="nav-link active" href="/admin/productmanagement">Product Management</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/admin/categorymanagement">Category Management</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/admin/couponmanagement">Coupon Management</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/admin/ordermanagement">Order Management</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/admin/salesreport">Sales Report</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/admin/logout">Logout</a>
            </li>
          </ul>
        </div>
      </nav>

      <!-- Main Content -->
      <main class="col-md-10 ms-sm-auto col-lg-10 px-md-4">
        <div class="container mt-5">
          <div class="form-group">
            <a href="/admin/productmanagement"><i class="fa-solid fa-circle-arrow-left"></i></a>
          </div>
          <h2 class="heading">Add Product</h2>
          <% if (typeof errMessage !== 'undefined') { %>
          <div class="text-danger mt-1">
            <%= errMessage %>
          </div>
          <% } %>
          <form action="/admin/addproduct" method="POST" enctype="multipart/form-data" id="productForm">
            <div class="form-group">
              <label for="productName">Name</label>
              <input type="text" class="form-control" id="productName" name="name" required>
              <div class="error-message" id="productNameError"></div>
            </div>

            <div class="form-group">
              <label for="productBrand">Brand</label>
              <div class="select-wrapper">
                <select class="form-control" id="productBrand" name="brand">
                  <option value="-">-</option>
                  <option value="Titan">Titan</option>
                  <option value="Fastrack">Fastrack</option>
                  <option value="Casio">Casio</option>
                  <option value="Timex">Timex</option>
                  <option value="Citizen">Citizen</option>
                  <option value="Fossil">Fossil</option>
                  <option value="Seiko">Seiko</option>
                  <option value="Michael Kors">Michael Kors</option>
                  <option value="Tommy Hilfiger">Tommy Hilfiger</option>
                  <option value="Emporio Armani">Emporio Armani</option>
                  <option value="Daniel Wellington">Daniel Wellington</option>
                  <option value="Guess">Guess</option>
                </select>
                <span class="select-arrow"><i class="fas fa-angle-down"></i></span>
              </div>
              <div class="error-message" id="productBrandError"></div>
            </div>

            <div class="form-group">
              <label for="strapMaterial">Strap Material</label>
              <div class="select-wrapper">
                <select class="form-control" id="strapMaterial" name="strapMaterial">
                  <option value="">-</option>
                  <option value="Leather Strap">Leather Strap</option>
                  <option value="Stainless Steel">Stainless Steel</option>
                  <option value="Nylon Strap">Nylon Strap</option>
                  <option value="Silicon Rubber">Silicon Rubber</option>
                  <option value="Ceramic Band">Ceramic Band</option>
                  <option value="Mesh Band">Mesh Band</option>
                  <option value="Titanium Band">Titanium Band</option>
                </select>
                <span class="select-arrow"><i class="fas fa-angle-down"></i></span>
              </div>
              <div class="error-message" id="strapMaterialError"></div>
            </div>

            <div class="form-group">
              <label for="gender">Gender</label>
              <div class="select-wrapper">
                <select class="form-control" id="gender" name="gender">
                  <option value="">-</option>
                  <option value="male">Male</option>
                  <option value="female">Female</option>
                </select>
                <span class="select-arrow"><i class="fas fa-angle-down"></i></span>
              </div>
              <div class="error-message" id="genderError"></div>
            </div>

            <div class="form-group">
              <label for="category">Category</label>
              <div class="select-wrapper">
                <select class="form-control" id="category" name="categories">
                  <option value="">-</option>
                  <% if (existingCategories && existingCategories.length > 0) { %>
                  <% existingCategories.forEach(category => { %>
                  <option value="<%= category.categoryName %>">
                    <%= category.categoryName %>
                  </option>
                  <% }) %>
                  <% } %>
                </select>
                <span class="select-arrow"><i class="fas fa-angle-down"></i></span>
              </div>
              <div class="error-message" id="categoryError"></div>
            </div>

            <div class="form-group">
              <label for="description">Description</label>
              <textarea class="form-control" id="description" name="description" rows="3"></textarea>
              <div class="error-message" id="descriptionError"></div>
            </div>

            <div class="form-group">
              <label for="stock">Stock</label>
              <input type="number" class="form-control" id="stock" name="stock">
              <div class="error-message" id="stockError"></div>
            </div>

            <div class="form-group">
              <label for="originalPrice">Original Price</label>
              <input type="number" class="form-control" id="originalPrice" name="originalPrice"
                oninput="calculatePrice()">
              <div class="error-message" id="originalPriceError"></div>
            </div>

            <div class="form-group">
              <label for="offerPercentage">Offer Percentage</label>
              <input type="number" class="form-control" id="offerPercentage" name="offerPercentage"
                oninput="calculatePrice()">
              <div class="error-message" id="offerPercentageError"></div>
            </div>

            <div class="form-group">
              <label for="price">Price</label>
              <input type="number" class="form-control" id="price" readonly>
              <div class="error-message" id="priceError"></div>
            </div>

            <div class="form-group">
              <label for="fileUploader">Product Images:</label>
              <input type="file" id="fileUploader" name="image" accept=".jpg,.png,.jpeg" multiple>
              <div id="imagePreview" class="image-preview-container"></div>
              <div class="error-message" id="imageError"></div>
            </div>

            <!-- Crop Modal -->
            <div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
              <div class="modal-dialog modal-lg">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                    <button type="button" class="btn-close" id="closeModal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <div class="img-container">
                      <img id="cropImage" src="" alt="Image for cropping">
                    </div>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="closeModal">Close</button>
                    <button type="button" class="btn btn-primary" id="cropButton">Crop</button>
                  </div>
                </div>
              </div>
            </div>

            <button type="submit" class="btn btn-primary">Add Product</button>
          </form>
        </div>
      </main>
    </div>
  </div>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <script>

        function calculatePrice() {
            const originalPrice = parseFloat(document.getElementById('originalPrice').value) || 0;
            const offerPercentage = parseFloat(document.getElementById('offerPercentage').value) || 0;
            const price = originalPrice - (originalPrice * (offerPercentage / 100));
            document.getElementById('price').value = price.toFixed(2);
        }

        const fileUploader = document.getElementById('fileUploader');
    const imagePreview = document.getElementById('imagePreview');
    let currentImage = null;
    let cropper;
    let imageFiles = [];
    let existingImages = [];

    function updateFileInput() {
        const dataTransfer = new DataTransfer();
        imageFiles.forEach(file => dataTransfer.items.add(file));
        fileUploader.files = dataTransfer.files;
    }

    function handleImagePreview(file, isNew = true) {
        const reader = new FileReader();
        reader.onload = function(e) {
            const img = document.createElement('img');
            img.src = e.target.result;
            img.className = 'preview-image';
            img.dataset.filename = file.name;

            const deleteBtn = document.createElement('button');
            deleteBtn.textContent = 'Delete';
            deleteBtn.className = 'delete-button';
            deleteBtn.addEventListener('click', () => {
                if (isNew) {
                    imageFiles = imageFiles.filter(f => f !== file);
                    updateFileInput();
                } else {
                    existingImages = existingImages.filter(f => f !== file);
                }
                img.remove();
                deleteBtn.remove();
                cropBtn.remove();
            });

            const cropBtn = document.createElement('button');
            cropBtn.textContent = 'Crop';
            cropBtn.className = 'crop-button';
            cropBtn.addEventListener('click', () => {
                currentImage = img;
                const cropImage = document.getElementById('cropImage');

                if (cropper) {
                    cropper.destroy();
                }

                cropImage.src = img.src;

                cropper = new Cropper(cropImage, {
                    aspectRatio: 1,
                });

                document.getElementById('cropButton').onclick = () => {
                    const canvas = cropper.getCroppedCanvas();
                    canvas.toBlob(blob => {
                        if (isNew) {
                            const index = imageFiles.indexOf(file);
                            if (index !== -1) {
                                imageFiles[index] = new File([blob], file.name, { type: file.type });
                                updateFileInput();
                            }
                        } else {
                            const index = existingImages.indexOf(file);
                            if (index !== -1) {
                                existingImages[index] = new File([blob], file.name, { type: file.type });
                            }
                        }
                    });
                    currentImage.src = canvas.toDataURL();
                    $('#cropModal').modal('hide');
                };

                $('#cropModal').modal('show');
            });

            const previewContainer = document.createElement('div');
            previewContainer.className = 'image-preview-item';
            previewContainer.appendChild(img);
            previewContainer.appendChild(deleteBtn);
            previewContainer.appendChild(cropBtn);
            imagePreview.appendChild(previewContainer);
        };
        reader.readAsDataURL(file);
    }

    fileUploader.addEventListener('change', function(event) {
        const files = event.target.files;
        const newFiles = Array.from(files);
        imageFiles.push(...newFiles);
        imagePreview.innerHTML = '';
        imageFiles.forEach(file => handleImagePreview(file));
        updateFileInput();
    });

    function loadExistingImages(existingImageList) {
        existingImages = existingImageList; 
        existingImages.forEach(file => handleImagePreview(file, false)); 
    }
            // Prevent form submission if validation fails
            document.getElementById('productForm').addEventListener('submit', function (event) {
            let isFormValid = true;

            document.querySelectorAll('#productForm .form-control').forEach(function (input) {
                if (!validateInput(input)) {
                    isFormValid = false;
                }
            });

            if (!isFormValid) {
                event.preventDefault();  
            }
        });

        function validateInput(input) {
            let isValid = true;
            const errorMessageElement = document.getElementById(input.id + 'Error');
            errorMessageElement.innerText = '';  // Reset error message

            switch (input.name) {
                case 'name':
                    if (input.value.trim() === '') {
                        errorMessageElement.innerText = 'Product Name is required.';
                        isValid = false;
                    }
                    break;

                case 'brand':
                    if (input.value.trim() === '-') {
                        errorMessageElement.innerText = 'Brand is required.';
                        isValid = false;
                    }
                    break;

                case 'strapMaterial':
                    if (input.value.trim() === '') {
                        errorMessageElement.innerText = 'Strap Material is required.';
                        isValid = false;
                    }
                    break;

                case 'gender':
                    if (input.value.trim() === '') {
                        errorMessageElement.innerText = 'Gender is required.';
                        isValid = false;
                    }
                    break;

                case 'categories':
                    if (input.value.trim() === '') {
                        errorMessageElement.innerText = 'Category is required.';
                        isValid = false;
                    }
                    break;

                case 'description':
                    if (input.value.trim() === '') {
                        errorMessageElement.innerText = 'Description is required and should add more informations.';
                        isValid = false;
                    }
                    break;

                case 'stock':
                    if (input.value.trim() === '' || isNaN(input.value) || parseInt(input.value) < 0) {
                        errorMessageElement.innerText = 'Stock must be a positive number.';
                        isValid = false;
                    }
                    break;

                case 'originalPrice':
                    if (input.value.trim() === '' || isNaN(input.value) || parseFloat(input.value) < 0) {
                        errorMessageElement.innerText = 'Original Price must be a positive number.';
                        isValid = false;
                    }
                    break;

                case 'offerPercentage':
                    if (input.value.trim() === '' || isNaN(input.value) || parseInt(input.value) < 0 || parseInt(input.value) >= 90) {
                        errorMessageElement.innerText = 'Offer Percentage should be between 0 to 90.';
                        isValid = false;
                    }
                    break;

                case 'price':
                    if (input.value.trim() === '' || isNaN(input.value) || parseFloat(input.value) <= 0) {
                        errorMessageElement.innerText = 'Price must be a positive number.';
                        isValid = false;
                    }
                    break;

                case 'image':
                    const fileUploader = document.getElementById('fileUploader');
                    if (fileUploader.files.length === 0) {
                        document.getElementById('imageError').innerText = 'Please upload at least one image.';
                        isValid = false;
                    }
                    break;
            }

            return isValid;  
        }


        document.getElementById('productName').addEventListener('blur', function () {
            validateInput(this);
        });
        document.getElementById('productBrand').addEventListener('blur', function () {
            validateInput(this);
        });
        document.getElementById('strapMaterial').addEventListener('blur', function () {
            validateInput(this);
        });
        document.getElementById('gender').addEventListener('blur', function () {
            validateInput(this);
        });
        document.getElementById('category').addEventListener('blur', function () {
            validateInput(this);
        });
        document.getElementById('description').addEventListener('blur', function () {
            validateInput(this);
        });
        document.getElementById('stock').addEventListener('blur', function () {
            validateInput(this);
        });
        document.getElementById('originalPrice').addEventListener('blur', function () {
            validateInput(this);
        });
        document.getElementById('offerPercentage').addEventListener('blur', function () {
            validateInput(this);
        });
        document.getElementById('price').addEventListener('blur', function () {
            validateInput(this);
        });
        document.getElementById('fileUploader').addEventListener('blur', function () {
            validateInput(this);
        });






        // JavaScript to handle arrow direction
        document.querySelectorAll('.select-wrapper select').forEach(function (select) {
            // Add event listener for focus (when dropdown opens)
            select.addEventListener('focus', function () {
                select.parentElement.classList.add('open');
            });

            // Add event listener for blur (when dropdown closes)
            select.addEventListener('blur', function () {
                select.parentElement.classList.remove('open');
            });

            // Add event listener for change (useful if clicking an option closes the dropdown)
            select.addEventListener('change', function () {
                select.parentElement.classList.remove('open');
            });
        });


    </script>
</body>

</html>